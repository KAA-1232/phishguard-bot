import logging
import os
import hashlib
import secrets
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from cryptography.fernet import Fernet
import sqlite3
import json
import re
from functools import wraps
import asyncio

# üîê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø GITHUB ACTIONS
class PhishGuardConfig:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è GitHub Actions
    BOT_TOKEN = os.environ.get('BOT_TOKEN', '8495458250:AAHlq0jfbZ7iOTdLjr964AnMTbFndMRgK_w')
    ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '')
    
    # –ö–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    ENCRYPTION_KEY = os.environ.get('ENCRYPTION_KEY', 'github_actions_phishguard_key_2024')
    JWT_SECRET = os.environ.get('JWT_SECRET', 'github_actions_jwt_secret')

    # –õ–∏–º–∏—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
    RATE_LIMITS = {
        'messages_per_minute': 10,
        'commands_per_hour': 40,
        'phone_checks_per_day': 20
    }


class SecureDatabase:
    def __init__(self):
        self.fernet = Fernet(PhishGuardConfig.ENCRYPTION_KEY.encode())
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect('phishguard.db') as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS security_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT NOT NULL,
                    action TEXT NOT NULL,
                    threat_level TEXT DEFAULT 'low',
                    details TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')

            conn.execute('''
                CREATE TABLE IF NOT EXISTS rate_limits (
                    user_id TEXT PRIMARY KEY,
                    message_count INTEGER DEFAULT 0,
                    command_count INTEGER DEFAULT 0,
                    last_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')

            conn.execute('''
                CREATE TABLE IF NOT EXISTS blocked_users (
                    user_id TEXT PRIMARY KEY,
                    reason TEXT,
                    blocked_until TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')

    def log_security_event(self, user_id: str, action: str, threat_level: str = 'low', details: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        with sqlite3.connect('phishguard.db') as conn:
            conn.execute('''
                INSERT INTO security_logs (user_id, action, threat_level, details)
                VALUES (?, ?, ?, ?)
            ''', (user_id, action, threat_level, details))


class PhishGuardBot:
    def __init__(self):
        self.db = SecureDatabase()

        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.suspicious_domains = [
            'bit.ly', 'tinyurl.com', 'clck.ru', 'raboninco.com', 'shorturl.at',
            'cutt.ly', 'is.gd', 'soo.gd', 'sh.st', 'bc.vc', 'adf.ly'
        ]

        self.scam_keywords = [
            '–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', '–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–≤–∑–ª–æ–º',
            '–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ', '—Å—Ä–æ—á–Ω–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            '—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞', '—Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        ]

        self.bank_phones = {
            '900': '–°–±–µ—Ä–±–∞–Ω–∫', '555': '–¢–∏–Ω—å–∫–æ—Ñ—Ñ', '980': '–ÆMoney',
            '962': '–ë–∞–Ω–∫ –í–¢–ë', '495': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫', '800': '–ï–¥–∏–Ω—ã–π –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä'
        }

        self.operator_codes = {
            '79': '–ú–µ–≥–∞–§–æ–Ω', '89': '–ú–µ–≥–∞–§–æ–Ω', '90': '–ë–∏–ª–∞–π–Ω', '93': '–ë–∏–ª–∞–π–Ω',
            '91': '–ú–¢–°', '98': '–ú–¢–°', '92': '–¢–µ–ª–µ2', '95': '–¢–µ–ª–µ2',
            '96': 'Yota', '97': 'Yota', '99': '–ë–∏–ª–∞–π–Ω'
        }

    async def analyze_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —É–≥—Ä–æ–∑—ã"""
        try:
            user = update.effective_user
            message = update.message

            if not message.text:
                return

            text = message.text
            user_id = str(user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await self._is_user_blocked(user_id):
                await message.reply_text("üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
            if not await self._check_rate_limit(user_id, 'message'):
                await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.")
                return

            # –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑
            threats = await self._detect_threats(text, user)

            if threats:
                await self._handle_threats(update, threats, text)
                self.db.log_security_event(user_id, "threat_detected", "high", f"Threats: {threats}")
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º —á–∏—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.db.log_security_event(user_id, "message_checked", "low")

        except Exception as e:
            logging.error(f"PhishGuard error: {e}")
            await self._notify_admin(f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {str(e)}")

    async def _detect_threats(self, text: str, user) -> list:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥—Ä–æ–∑ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        threats = []
        text_lower = text.lower()

        # üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        url_pattern = r'https?://[^\s]+'
        urls = re.findall(url_pattern, text_lower)

        for url in urls:
            if any(domain in url for domain in self.suspicious_domains):
                threats.append(f"–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url[:50]}")

        # üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        phone_pattern = r'[\+\(]?[1-9][0-9\-\(\)\.]{7,}[0-9]'
        phones = re.findall(phone_pattern, text)

        for phone in phones:
            clean_phone = re.sub(r'[^\d]', '', phone)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ—à–µ–Ω–Ω–∏–∫–∞–º–∏)
            for prefix in self.bank_phones.keys():
                if clean_phone.startswith(prefix):
                    threats.append(f"–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –Ω–æ–º–µ—Ä: {phone}")
                    break

        # üí¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤
        for keyword in self.scam_keywords:
            if keyword in text_lower:
                threats.append(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤: '{keyword}'")

        # ‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è)
        urgency_words = ['—Å—Ä–æ—á–Ω–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–±—ã—Å—Ç—Ä–µ–µ', '–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å', '—Å–∫–æ—Ä–µ–µ']
        urgency_count = sum(1 for word in urgency_words if word in text_lower)
        if urgency_count >= 2:
            threats.append("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å")

        return threats

    async def _handle_threats(self, update: Update, threats: list, original_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑"""
        user = update.effective_user
        message = update.message

        threat_msg = "üö® PHISHGUARD –û–ë–ù–ê–†–£–ñ–ò–õ –£–ì–†–û–ó–´:\n\n"

        for i, threat in enumerate(threats[:5], 1):
            threat_msg += f"{i}. {threat}\n"

        threat_msg += f"\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user.first_name}"
        if user.username:
            threat_msg += f" (@{user.username})"

        threat_msg += f"\nüÜî ID: {user.id}"
        threat_msg += f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {original_text[:100]}..."

        threat_msg += "\n\nüõ°Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        threat_msg += "‚Ä¢ –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º\n"
        threat_msg += "‚Ä¢ –ù–ï —Å–æ–æ–±—â–∞–π—Ç–µ –∫–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        threat_msg += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n"
        threat_msg += "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ\n"

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if PhishGuardConfig.ADMIN_CHAT_ID:
            await self._notify_admin(threat_msg)

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await message.delete()
            await message.chat.send_message(
                f"üõ°Ô∏è PhishGuard —É–¥–∞–ª–∏–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}\n"
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≥—Ä–æ–∑: {len(threats)}"
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    async def phone_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        user_id = str(update.effective_user.id)

        if not await self._check_rate_limit(user_id, 'command'):
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.")
            return

        if not context.args:
            await update.message.reply_text(
                "üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /phone +79123456789\n"
                "–ü—Ä–∏–º–µ—Ä: /phone 89501234567"
            )
            return

        phone = context.args[0]
        analysis = self._analyze_phone_number(phone)

        await update.message.reply_text(analysis, parse_mode='HTML')
        self.db.log_security_event(user_id, "phone_check", "low", f"Phone: {phone}")

    def _analyze_phone_number(self, phone: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        clean_phone = re.sub(r'[^\d+]', '', phone)

        result = "üìä <b>–ê–ù–ê–õ–ò–ó –ù–û–ú–ï–†–ê:</b>\n\n"
        result += f"üî¢ –ù–æ–º–µ—Ä: <code>{phone}</code>\n\n"

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator = self._identify_operator(clean_phone)
        result += f"üì± –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}\n"

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞
        bank = self._identify_bank(clean_phone)
        result += f"üè¶ –ë–∞–Ω–∫: {bank}\n"

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ (–¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
        if clean_phone.startswith('7') and len(clean_phone) == 11:
            region = self._identify_region(clean_phone[1:4])
            result += f"üåç –†–µ–≥–∏–æ–Ω: {region}\n"

        result += "\nüõ°Ô∏è <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:</b>\n"
        result += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫\n"
        result += "‚Ä¢ –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –æ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–≤\n"
        result += "‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –∫–æ–¥—ã –∏–∑ SMS\n"
        result += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—é\n"

        result += "\nüîç <b>–ü–†–û–í–ï–†–ö–ê –ß–ï–†–ï–ó –ë–ê–ù–ö–ò:</b>\n"
        result += self._get_bank_check_info(clean_phone)

        return result

    def _identify_operator(self, phone: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–≤—è–∑–∏"""
        if phone.startswith('+7'):
            prefix = phone[2:4]
        elif phone.startswith('7'):
            prefix = phone[1:3]
        elif phone.startswith('8'):
            prefix = phone[1:3]
        else:
            prefix = phone[:2]

        return self.operator_codes.get(prefix, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä")

    def _identify_bank(self, phone: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
        clean_phone = re.sub(r'[^\d]', '', phone)
        for prefix, bank in self.bank_phones.items():
            if clean_phone.startswith(prefix) or clean_phone.endswith(prefix):
                return bank
        return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

    def _identify_region(self, code: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"""
        regions = {
            '495': '–ú–æ—Å–∫–≤–∞', '499': '–ú–æ—Å–∫–≤–∞', '498': '–ú–æ—Å–∫–≤–∞',
            '812': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '813': '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            '381': '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '383': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            '343': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '846': '–°–∞–º–∞—Ä–∞', '863': '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'
        }
        return regions.get(code, "–†–µ–≥–∏–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

    def _get_bank_check_info(self, phone: str) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–∏"""
        info = ""
        if phone.startswith('79'):
            info += "‚Ä¢ –°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
        if len(phone) == 11:
            info += "‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            info += "‚Ä¢ –í–¢–ë: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ '–ü–µ—Ä–µ–≤–æ–¥—ã'\n"
            info += "‚Ä¢ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
        return info if info else "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤"

    async def security_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        info_text = """
üõ°Ô∏è <b>PHISHGUARD BOT - –ó–ê–©–ò–¢–ê –û–¢ –ú–û–®–ï–ù–ù–ò–ö–û–í</b>

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>
‚Ä¢ üîó –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
‚Ä¢ üìû –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤  
‚Ä¢ üí¨ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤
‚Ä¢ ‚ö° –°–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/phone +79123456789 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞
/security - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)

<b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –£–¥–∞–ª—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç —Ñ–∏—à–∏–Ω–≥–∞ –∏ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
‚Ä¢ –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –∫–æ–¥—ã –∏–∑ SMS
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–µ–∑–Ω–∞–∫–æ–º—ã–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ /phone
‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ Telegram
        """
        await update.message.reply_text(info_text, parse_mode='HTML')

    async def admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = str(update.effective_user.id)

        if user_id != PhishGuardConfig.ADMIN_CHAT_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        with sqlite3.connect('phishguard.db') as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≥—Ä–æ–∑
            threat_stats = conn.execute('''
                SELECT threat_level, COUNT(*) FROM security_logs 
                WHERE created_at > datetime('now', '-1 day')
                GROUP BY threat_level
            ''').fetchall()

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_checks = conn.execute(
                'SELECT COUNT(*) FROM security_logs WHERE created_at > datetime("now", "-1 day")'
            ).fetchone()[0]

            blocked_users = conn.execute(
                'SELECT COUNT(*) FROM blocked_users WHERE blocked_until > CURRENT_TIMESTAMP'
            ).fetchone()[0]

        stats_msg = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê PHISHGUARD</b>\n\n"
        stats_msg += f"üïê –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞\n"
        stats_msg += f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}\n"
        stats_msg += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_users}\n\n"

        for level, count in threat_stats:
            icon = "üî¥" if level == 'high' else "üü°" if level == 'medium' else "üü¢"
            stats_msg += f"{icon} –£–≥—Ä–æ–∑ —É—Ä–æ–≤–Ω—è {level}: {count}\n"

        await update.message.reply_text(stats_msg, parse_mode='HTML')

    async def _is_user_blocked(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('phishguard.db') as conn:
            blocked = conn.execute(
                'SELECT 1 FROM blocked_users WHERE user_id = ? AND (blocked_until > CURRENT_TIMESTAMP OR blocked_until IS NULL)',
                (user_id,)
            ).fetchone()
            return bool(blocked)

    async def _check_rate_limit(self, user_id: str, request_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        with sqlite3.connect('phishguard.db') as conn:
            user_data = conn.execute(
                'SELECT * FROM rate_limits WHERE user_id = ?', (user_id,)
            ).fetchone()

            now = datetime.now()
            limits = PhishGuardConfig.RATE_LIMITS

            if not user_data:
                conn.execute(
                    'INSERT INTO rate_limits (user_id, message_count, command_count, last_reset) VALUES (?, 1, 0, ?)',
                    (user_id, now)
                )
                return True

            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
            last_reset = datetime.fromisoformat(user_data[3])
            if now - last_reset > timedelta(hours=1):
                conn.execute(
                    'UPDATE rate_limits SET message_count = 0, command_count = 0, last_reset = ? WHERE user_id = ?',
                    (now, user_id)
                )
                return True

            if request_type == 'message':
                if user_data[1] >= limits['messages_per_minute']:
                    return False
                conn.execute(
                    'UPDATE rate_limits SET message_count = message_count + 1 WHERE user_id = ?',
                    (user_id,)
                )
            elif request_type == 'command':
                if user_data[2] >= limits['commands_per_hour']:
                    return False
                conn.execute(
                    'UPDATE rate_limits SET command_count = command_count + 1 WHERE user_id = ?',
                    (user_id,)
                )

            return True

    async def _notify_admin(self, message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not PhishGuardConfig.ADMIN_CHAT_ID:
            return

        try:
            app = Application.builder().token(PhishGuardConfig.BOT_TOKEN).build()
            await app.bot.send_message(
                chat_id=PhishGuardConfig.ADMIN_CHAT_ID,
                text=message
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")


# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê –î–õ–Ø GITHUB ACTIONS
async def main_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è GitHub Actions"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if not PhishGuardConfig.BOT_TOKEN:
            logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format='%(asctime)s - PHISHGUARD - %(levelname)s - %(message)s',
            level=logging.INFO
        )

        logging.info("üõ°Ô∏è –ó–∞–ø—É—Å–∫ PhishGuard Bot –≤ GitHub Actions...")
        logging.info(f"ü§ñ –ë–æ—Ç: t.me/phishguard_bot")

        if PhishGuardConfig.ADMIN_CHAT_ID:
            logging.info(f"üëë –ê–¥–º–∏–Ω: {PhishGuardConfig.ADMIN_CHAT_ID}")
        else:
            logging.warning("‚ö†Ô∏è ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(PhishGuardConfig.BOT_TOKEN).build()
        bot = PhishGuardBot()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", bot.security_info))
        application.add_handler(CommandHandler("phone", bot.phone_check))
        application.add_handler(CommandHandler("security", bot.security_info))
        application.add_handler(CommandHandler("stats", bot.admin_stats))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.analyze_message))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ GitHub Actions")
        await application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        await asyncio.sleep(10)
        raise e

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    asyncio.run(main_async())

if __name__ == "__main__":
    main()
